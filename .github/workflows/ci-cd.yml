name: ci-cd

on:
  - push

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: new-app
 
jobs:
  build:
    name: 'Build image'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

  test:
    needs: build
    name: 'Scan image'
    runs-on: ubuntu-latest
    steps: 
      - uses: anchore/scan-action@v2
        id: scan 
        with: 
          image: $IMAGE_NAME

  # Push image to GitHub Packages.
  push:
    name: 'Push to registry'
    # Ensure test job passes before pushing image.
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          
  deploy:
    name: 'Deploy to k8s cluster'
    needs: push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Deploy to Kubernetes
        run: kubectl --kubeconfig $GITHUB_WORKSPACE/kubeconfig apply -f  $GITHUB_WORKSPACE/deployment.yaml
