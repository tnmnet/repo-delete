# Verify configuration parameters specific for AWS as a sanity check and fail-fast.
# Parameters:
#   1) path of the configuration file
#   2) path of the secrets configuration file
#   3) workspace label
# Return:
#   sets global constants
verify_configuration ()
{
  # Check presence of CLI
  verify_tool "aws"

  verify_conf_value $CONFIG_FILE "workspaces.(name==$WORKSPACE).kubernetes.region"
  REGION=$verify_conf_value_retval

  verify_conf_value $CONFIG_FILE "workspaces.(name==$WORKSPACE).kubernetes.kops-state-store"
  KOPS_STATE_STORE_BUCKET_NAME=$verify_conf_value_retval

  verify_conf_value $CONFIG_FILE "workspaces.(name==$WORKSPACE).kubernetes.api-server-domain"
  API_SERVER_DOMAIN=$verify_conf_value_retval

  verify_conf_value $CONFIG_FILE_SECRETS "kubernetes.access-key"
  export AWS_ACCESS_KEY_ID=$verify_conf_value_retval

  verify_conf_value $CONFIG_FILE_SECRETS "kubernetes.secret-key"
  export AWS_SECRET_ACCESS_KEY=$verify_conf_value_retval

  NAME=$API_SERVER_DOMAIN
  export KOPS_STATE_STORE=s3://$KOPS_STATE_STORE_BUCKET_NAME
  CLUSTER_CONFIG="$DIR_LOCAL_CACHE_WKS/cluster-config.$NAME.yaml"
  KEY_PAIR_NAME="key-pair.$NAME"

  return 0
}


# Executes the script specific for AWS to create the Terraform backend storage.
# Make sure variables are set accordingly.
build_kubernetes ()
{
  # Create the bucket
  echo "Creating 'kops' state storage..."
  aws s3api create-bucket --bucket $KOPS_STATE_STORE_BUCKET_NAME
  aws s3api put-bucket-versioning \
          --bucket $KOPS_STATE_STORE_BUCKET_NAME \
          --versioning-configuration Status=Enabled
  echo "Creating 'kops' state storage...done."

  echo "Generating key pair..."
  ssh-keygen -b 2048 -t rsa -f $DIR_LOCAL_CACHE_WKS/$KEY_PAIR_NAME.secrets -q -N ""
  echo "Generating key pair...done."

  echo "Creating cluster '$NAME'..."
  # First create cluster manifest for visibility and later use/modifications
  # Availability zone 'b' below is chosen randomly
  kops create cluster \
      --zones ${REGION}b \
      --node-count 4 \
      --ssh-public-key "$DIR_LOCAL_CACHE_WKS/$KEY_PAIR_NAME.secrets.pub" \
      --dry-run \
      --output yaml > $CLUSTER_CONFIG \
      ${NAME}

  # Now creating cluster configuration...
  kops create -f $CLUSTER_CONFIG

  # ... and finally updating the cluster cloud resources (i.e. creating in this case)
  kops create secret --name $NAME sshpublickey admin -i $DIR_LOCAL_CACHE_WKS/$KEY_PAIR_NAME.secrets.pub
  KUBECONFIG=$DIR_LOCAL_CACHE_WKS/kube-config kops update cluster $NAME --yes
  # Note: for updating one also needs to roll out the changes to match configuration:
  #kops rolling-update cluster $NAME --yes

  echo "Waiting for the Kubernetes cluster to be available (this will take a few minutes)..."
  declare -i counter=0
  while [[ $counter -lt 25 ]]; do
    counter=$((counter+1))
    echo "Still waiting... ($counter)"
    sleep 10
  done
  echo "Waiting for the Kubernetes cluster to be available...done."

  echo
  echo $'\e[1;34m'SSH key pair for cluster access in: $DIR_LOCAL_CACHE_WKS$'\e[0m'
  echo

  return 0
}

# Destroys the backed in AWS
destroy_kubernetes ()
{
  kops delete cluster ${NAME} --yes
  rm $CLUSTER_CONFIG

  echo "Removing kops state store 1/3..."
  # Switch off versioning
  aws s3api put-bucket-versioning \
          --bucket "$KOPS_STATE_STORE_BUCKET_NAME" \
          --versioning-configuration Status=Suspended

  # Delete all Versions
  BUCKET_ITEMS=$(aws s3api list-object-versions \
        --bucket "$KOPS_STATE_STORE_BUCKET_NAME" \
        --no-paginate \
        --output=json \
        --query='{Versions: Versions[].{Key:Key,VersionId:VersionId}}' \
        )
  # Replace 'Versions' with 'Objects' for subsequent operations
  BUCKET_ITEM_PARAM=$(echo $BUCKET_ITEMS | sed 's/Versions/Objects/g')
  # Silence the object deletion unless there is an error
  BUCKET_ITEM_PARAM=$(echo $BUCKET_ITEM_PARAM | sed 's/]/],\"Quiet\":true/')
  # Finally, delete
  aws s3api delete-objects \
      --bucket "$KOPS_STATE_STORE_BUCKET_NAME" \
      --delete "$BUCKET_ITEM_PARAM"
  echo "Removing kops state store 1/3...done."

  echo "Removing kops state store 2/3..."
  # Delete all DeleteMarkers
  BUCKET_ITEMS=$(aws s3api list-object-versions \
        --bucket "$KOPS_STATE_STORE_BUCKET_NAME" \
        --no-paginate \
        --output=json \
        --query='{DeleteMarkers: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' \
        )
  # Replace 'DeleteMarkers' with 'Objects' for subsequent operations
  BUCKET_ITEM_PARAM=$(echo $BUCKET_ITEMS | sed 's/DeleteMarkers/Objects/g')
  # Silence the object deletion unless there is an error
  BUCKET_ITEM_PARAM=$(echo $BUCKET_ITEM_PARAM | sed 's/]/],\"Quiet\":true/')
  # ... and delete
  aws s3api delete-objects \
      --bucket "$KOPS_STATE_STORE_BUCKET_NAME" \
      --delete "$BUCKET_ITEM_PARAM"
  echo "Removing kops state store 2/3...done."

  # And, finally, take out the bucket
  echo "Removing kops state store 3/3..."
  aws s3api delete-bucket --bucket "$KOPS_STATE_STORE_BUCKET_NAME"
  echo "Removing kops state store 3/3...done."

  # Remove SSH key pair
  rm -rf $DIR_LOCAL_CACHE_WKS/$KEY_PAIR_NAME.secrets*

  return 0
}
