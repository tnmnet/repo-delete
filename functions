#!/bin/bash
### Global functions

# Verify that an expected tool is installed
# Parameters:
#   1) Name of the tool
# Return: none
verify_tool ()
{
  [[ "$(command -v $1)" ]] || { echo $'\e[1;31m'"Necessary tool '$1' not installed, exiting!"$'\e[0m' 1>&2 ; exit 1; }
  return 0
}

# Parsing common parameters
# Return:
#   sets global BUILD: build direction
#   sets gloabl WORKSPACE: workspace label
parse_args ()
{
  # Usage:
  # -e 'CMD=l' for listing configured workspaces or
  # -e 'CMD=u|d' -e 'WKS=<name>' for build up or down and the workspace
  case $CMD in
    l)
      LIST=$CMD
      ;;
    u|d)
      BUILD=$CMD
      WORKSPACE=$WKS
      ;;
  esac

  if [ -z "$LIST" ]; then
    [[ -z "$BUILD" ]] && { echo $'\e[1;31m'"ERROR>>> Missing list (-e 'CMD=l') or build (-e 'CMD=u|d') environment parameter, exiting!"$'\e[0m' 1>&2 ; exit 1; }
    [[ -z "$WORKSPACE" ]] && { echo $'\e[1;31m'"ERROR>>> Missing workspace (-e 'WKS=<name>') environment parameter, exiting!"$'\e[0m' 1>&2 ; exit 1; }

    read_conf_value $CONFIG_FILE "workspaces.name==$WORKSPACE"
    [[ -z "$read_conf_value_retval" ]] && { echo $'\e[1;31m'"ERROR>>> Workspace '$WORKSPACE' not configured in '$CONFIG_FILE', exiting!"$'\e[0m' 1>&2 ; exit 1; }

    read_conf_value $SECRETS_FILE "workspaces.name==$WORKSPACE"
    [[ -z "$read_conf_value_retval" ]] && { echo $'\e[1;31m'"ERROR>>> Workspace '$WORKSPACE' not configured in '$SECRETS_FILE', exiting!"$'\e[0m' 1>&2 ; exit 1; }

  else
    list_workspaces $CONFIG_FILE
    exit 0
  fi

  return 0
}

# Read configuration parameter
# Parameters:
#   1) configuration file
#   2) YAML query string
# Return:
#   read_conf_value_retval: configuration value
read_conf_value ()
{
  read_conf_value_retval=$(yq r $1 "$2")
  return 0
}

# Read configuration parameter and check that it exists
# Parameters:
#   1) configuration file
#   2) YAML query string
# Return:
#   verify_conf_value_retval: verified configuration value
verify_conf_value ()
{
  read_conf_value $1 "$2"
  [[ -z "$read_conf_value_retval" ]] && { echo $'\e[1;31m'"ERROR>>> Missing configuration: '$2' ($1), exiting!"$'\e[0m' 1>&2 ; exit 1; }
  verify_conf_value_retval=$read_conf_value_retval
  return 0
}

# Verify general configuration parameters needed in all scripts as a sanity check and fail-fast.
# Parameters:
#   1) path of the configuration directory
#   2) workspace label
# Return:
#   sets global DIR_LOCAL_CACHE: the root directory of all cached files
#   sets global DIR_LOCAL_CACHE_WKS: root directory for cached file of this workspace
#   sets global DIR_LOCAL_CACHE_TF: root directory for cached Terraform files
#   sets global FILE_GENERATED_CONFIG: path to the generated configuration values file
verify_common_conf ()
{
  workspace=$1

  verify_conf_value $CONFIG_FILE "dir-local-cache"
  DIR_LOCAL_CACHE=$CONFIG_PATH/$verify_conf_value_retval
  DIR_LOCAL_CACHE_WKS=$DIR_LOCAL_CACHE/$workspace

  verify_conf_value $CONFIG_FILE "dir-local-cache-tf"
  DIR_LOCAL_CACHE_TF=$DIR_LOCAL_CACHE_WKS/$verify_conf_value_retval
  
  read_conf_value $CONFIG_FILE "dir-local-cache-az"
  DIR_LOCAL_CACHE_AZ=$dir_local_cache_wks/$read_conf_value_retval
  
  verify_conf_value $CONFIG_FILE "file-generated-config"
  FILE_GENERATED_CONFIG=$DIR_LOCAL_CACHE_WKS/$verify_conf_value_retval
    
  verify_conf_value $CONFIG_FILE "workspaces.(name==$workspace).provider.name"
  PROVIDER=$verify_conf_value_retval

  verify_conf_value $CONFIG_FILE "workspaces.(name==$workspace).kubernetes.cluster-type"
  CLUSTER_TYPE=$verify_conf_value_retval

  # Provider authentication
  case $PROVIDER.$CLUSTER_TYPE in
    aws.eks|aws.kops)
      verify_conf_value $SECRETS_FILE "workspaces.(name==$workspace).provider-credentials.access-key"
      export AWS_ACCESS_KEY_ID=$verify_conf_value_retval
      verify_conf_value $SECRETS_FILE "workspaces.(name==$workspace).provider-credentials.secret-key"
      export AWS_SECRET_ACCESS_KEY=$verify_conf_value_retval
      verify_conf_value $CONFIG_FILE "workspaces.(name==$workspace).provider.default-region"
      export AWS_DEFAULT_REGION=$verify_conf_value_retval
      ;;
    azure.default)
      # We are using interactive CLI authentication with 'az login',
      # replace this with a properly scoped Service Principal for production.

      # Temporarily use $HOME/.azure for the Azure configuration directory (it's the default)
      # since Terraform does not honor the AZURE_CONFIG_DIR environment variable.
      # When the bug has been fixed switch to using a sub directory of the cache.
      # https://github.com/hashicorp/terraform/issues/25416 (last checked 09/01/2020)
      #export AZURE_CONFIG_DIR=$DIR_LOCAL_CACHE_WKS/$DIR_LOCAL_CACHE_AZ
      export AZURE_CONFIG_DIR=$HOME/.azure

      if [ ! -d "$AZURE_CONFIG_DIR" ]; then
        az login
      fi
      ;;
  esac

  # Limit Terraform text output
  export TF_IN_AUTOMATION=true

  return 0
}

# Lists all available workspaces in the configuration file.
# Parameters:
#   1) configuration file
# Return:
#   lists all configured workspaces
list_workspaces ()
{
  echo Listing configured workspaces:
  yq r $1 "workspaces[*].name" | while read workspace
  do
    echo $'\e[1;34m'$workspace$'\e[0m'
  done
}

# Initializes local cache directories if they don't exist yet
# Parameters:
#   1) configuration path
#   2) workspace
# Return: none
init_caches ()
{
  echo Initializing caches...
  workspace=$1

  read_conf_value $CONFIG_FILE "dir-local-cache"
  dir_local_cache=$CONFIG_PATH/$read_conf_value_retval/$workspace
  
  read_conf_value $CONFIG_FILE "dir-local-cache-tf"
  dir_local_cache_tf=$dir_local_cache/$read_conf_value_retval
  
  # Do not delete this comment!
  # The Azure CLI configuration cache directory 'dir-local-cache-az'
  # will be created by the 'az login' command in 'verify_common_conf' if needed

  read_conf_value $CONFIG_FILE "file-generated-config"
  file_generated_config=$dir_local_cache/$read_conf_value_retval

  if [ ! -d "$dir_local_cache_tf" ]; then
    mkdir -p $dir_local_cache_tf
  fi

  if [ ! -f "$file_generated_config" ]; then
    echo "workspaces:" > $file_generated_config
    yq w -i $file_generated_config "workspaces[+].name" $workspace
  fi

  echo Initializing caches...success.
  return 0
}

# Cleans up the local cache directories
# Parameters:
#   1) workspace
# Return: none
cleanup_caches ()
{
  echo Cleaning up caches...
  workspace=$1

  read_conf_value $CONFIG_FILE "dir-local-cache"
  dir_local_cache=$CONFIG_PATH/$read_conf_value_retval
  dir_local_cache_wks=$dir_local_cache/$workspace
  
  read_conf_value $CONFIG_FILE "dir-local-cache-tf"
  dir_local_cache_tf=$dir_local_cache_wks/$read_conf_value_retval

  read_conf_value $CONFIG_FILE "dir-local-cache-az"
  dir_local_cache_az=$dir_local_cache_wks/$read_conf_value_retval
  
  read_conf_value $CONFIG_FILE "file-generated-config"
  file_generated_config=$dir_local_cache_wks/$read_conf_value_retval

  if [ -d "$dir_local_cache_tf" ] && [ -z "$(ls -A $dir_local_cache_tf)" ]; then
    rmdir $dir_local_cache_tf
  fi

  if [ -f "$file_generated_config" ]; then
    if [ "$(yq r $file_generated_config --length "workspaces.(name==$workspace)")" = "1" ]; then
      yq delete -i $file_generated_config "workspaces.(name==$workspace)"
    fi

    if [ "$(yq r $file_generated_config --length "workspaces")" = "0" ]; then
      rm $file_generated_config
    fi
  fi

  # The Azure CLI configuration cache directory 'dir-local-cache-az' will be created by the
  # 'az login' command in 'verify_common_conf'. Delete this directory only if it is the
  # last directory in the cache as it is needed by all components!
  declare -i counter=0
  for dir in $dir_local_cache_wks/*/
  do
    counter=$((counter+1))
  done
  if [ $counter -eq 1  ]; then
    if [ -d "$dir_local_cache_az" ]; then
      rm -rf $dir_local_cache_az
    fi
  fi

  if [ -z "$(ls -A $dir_local_cache_wks)" ]; then
    rmdir $dir_local_cache_wks
  fi

  if [ -z "$(ls -A $dir_local_cache)" ]; then
    rmdir $dir_local_cache
  fi

  echo Cleaning up caches...success.
  return 0
}


# Waits a certain amount outputting a message for the user
# Parameters:
#   1) message
#   2) ticks: each tick is 10 seconds
# Return: none
wait_ticks ()
{
  message=$1
  ticks=$2
  echo "$message..."
  declare -i counter=0
  while [[ $counter -lt $ticks ]]; do
    counter=$((counter+1))
    echo "Still waiting... ($counter)"
    sleep 10
  done
  echo "$1...done."
}

# ---------------------------------------------------------
# Common sources

# Check tools
verify_tool "yq"
verify_tool "jq"
verify_tool "terraform"
verify_tool "kubectl"
verify_tool "helm"
verify_tool "vault"
